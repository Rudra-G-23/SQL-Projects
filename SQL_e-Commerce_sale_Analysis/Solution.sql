-------------------------------------------------- Basic Queries --------------------------------------------------
-- 1. List all unique cities where customers are located.
SELECT DISTINCT
	CUSTOMER_CITY
FROM
	CUSTOMERS

----------------------------------------------------------------------------------------------------
-- 2. Count the number of orders placed in 2017.
SELECT COUNT(order_id)
FROM orders
WHERE EXTRACT(YEAR FROM order_purchase_timestamp) = 2017;

----------------------------------------------------------------------------------------------------
-- 3. Find the total sales per category.
SELECT
	PRODUCTS.PRODUCT_CATEGORY,
	SUM(PAYMENTS.PAYMENT_VALUE) SALES
FROM
	PUBLIC.PRODUCTS
	JOIN PUBLIC.ORDER_ITEMS ON PUBLIC.PRODUCTS.PRODUCT_ID = PUBLIC.ORDER_ITEMS.PRODUCT_ID
	JOIN PUBLIC.PAYMENTS ON PUBLIC.PAYMENTS.ORDER_ID = PUBLIC.ORDER_ITEMS.ORDER_ID
GROUP BY
	PRODUCT_CATEGORY

----------------------------------------------------------------------------------------------------
-- 4. Calculate the percentage of orders that were paid in installments.
SELECT
	ROUND(
		100.0 * SUM(
			CASE
				WHEN PAYMENT_INSTALLMENTS >= 1 THEN 1
				ELSE 0
			END
		) / COUNT(*),
		4
	) AS PERCENTAGE_PAID
FROM
	PAYMENTS

----------------------------------------------------------------------------------------------------
-- 5. Count the number of customers from each state.
SELECT
    CUSTOMER_STATE,
    COUNT(CUSTOMER_ID) AS NUM
FROM
    PUBLIC.CUSTOMERS
GROUP BY
    CUSTOMER_STATE
ORDER BY
    NUM DESC

-------------------------------------------------- Intermediate Queries --------------------------------------------------
-- 1. Calculate the number of orders per month in 2018.
SELECT 
  TO_CHAR(order_purchase_timestamp, 'Month') AS month_name,
  COUNT(order_id) AS order_count
FROM 
  orders  
WHERE
  EXTRACT(YEAR FROM order_purchase_timestamp) = 2018
GROUP BY
  month_name

----------------------------------------------------------------------------------------------------
-- 2. Find the average number of products per order, grouped by customer city.
WITH
	COUNT_PER_ORDER AS (
		SELECT
			PUBLIC.ORDERS.ORDER_ID,
			PUBLIC.ORDERS.CUSTOMER_ID,
			COUNT(ORDER_ITEMS.ORDER_ID) AS OC
		FROM
			PUBLIC.ORDERS
			JOIN PUBLIC.ORDER_ITEMS ON PUBLIC.ORDERS.ORDER_ID = PUBLIC.ORDER_ITEMS.ORDER_ID
		GROUP BY
			PUBLIC.ORDERS.ORDER_ID,
			PUBLIC.ORDERS.CUSTOMER_ID
	)
SELECT
	PUBLIC.CUSTOMERS.CUSTOMER_CITY,
	ROUND(AVG(COUNT_PER_ORDER.OC), 2) AS AVG_ORDER_COUNT
FROM
	PUBLIC.CUSTOMERS
	JOIN COUNT_PER_ORDER ON PUBLIC.CUSTOMERS.CUSTOMER_ID = COUNT_PER_ORDER.CUSTOMER_ID
GROUP BY
	PUBLIC.CUSTOMERS.CUSTOMER_CITY
ORDER BY
	AVG_ORDER_COUNT DESC;

----------------------------------------------------------------------------------------------------
-- 3. Calculate the percentage of total revenue contributed by each product category.
SELECT
	UPPER(PUBLIC.PRODUCTS.PRODUCT_CATEGORY),
	ROUND(SUM(PUBLIC.ORDER_ITEMS.PRICE)) AS TOTAL_PRICE
FROM
	PUBLIC.PRODUCTS
	INNER JOIN PUBLIC.ORDER_ITEMS 
	ON PUBLIC.PRODUCTS.PRODUCT_ID = PUBLIC.ORDER_ITEMS.PRODUCT_ID
GROUP BY
	PUBLIC.PRODUCTS.PRODUCT_CATEGORY
ORDER BY
	TOTAL_PRICE DESC;

----------------------------------------------------------------------------------------------------
-- 4. Identify the correlation between product price and the number of times a product has been purchased.
SELECT
	UPPER(PUBLIC.PRODUCTS.PRODUCT_CATEGORY) AS CATEGORY,
	SUM(PUBLIC.ORDER_ITEMS.PRICE) AS TOTAL_ITEM_PRICE,
	COUNT(PUBLIC.ORDER_ITEMS.ORDER_ITEM_ID) AS TOTAL_ITEM
FROM
	PUBLIC.PRODUCTS
	JOIN PUBLIC.ORDER_ITEMS ON PUBLIC.PRODUCTS.PRODUCT_ID = PUBLIC.ORDER_ITEMS.PRODUCT_ID
	JOIN PUBLIC.ORDERS ON PUBLIC.ORDER_ITEMS.ORDER_ID = PUBLIC.ORDERS.ORDER_ID
WHERE
	PUBLIC.ORDERS.ORDER_STATUS = 'delivered'
GROUP BY
	PUBLIC.PRODUCTS.PRODUCT_CATEGORY
ORDER BY
	TOTAL_ITEM DESC;

----------------------------------------------------------------------------------------------------
-- 5. Calculate the total revenue generated by each seller, and rank them by revenue.
SELECT
	ORDER_ITEMS.SELLER_ID,
	SUM(PAYMENTS.PAYMENT_VALUE) AS REVENUE,
	DENSE_RANK() OVER (
		ORDER BY
			SUM(PAYMENTS.PAYMENT_VALUE) DESC
	) AS REVENUE_RANK
FROM
	ORDER_ITEMS
	JOIN PAYMENTS 
    ON ORDER_ITEMS.ORDER_ID = PAYMENTS.ORDER_ID
GROUP BY
	ORDER_ITEMS.SELLER_ID
ORDER BY
	REVENUE DESC;

-------------------------------------------------- Advanced Queries --------------------------------------------------
-- 1. Calculate the moving average of order values for each customer over their order history.
SELECT
	CUSTOMER_ID,
	ORDER_PURCHASE_TIMESTAMP,
	PAYMENT,
	AVG(PAYMENT) OVER (
		PARTITION BY
			CUSTOMER_ID
		ORDER BY
			ORDER_PURCHASE_TIMESTAMP ROWS BETWEEN 2 PRECEDING
			AND CURRENT ROW
	) AS MOVING_AVG
FROM
	(
		SELECT
			PUBLIC.ORDERS.CUSTOMER_ID,
			PUBLIC.ORDERS.ORDER_PURCHASE_TIMESTAMP,
			PUBLIC.PAYMENTS.PAYMENT_VALUE AS PAYMENT
		FROM
			PUBLIC.PAYMENTS
			JOIN PUBLIC.ORDERS ON PUBLIC.PAYMENTS.ORDER_ID = PUBLIC.ORDERS.ORDER_ID
	) AS A
ORDER BY 
	MOVING_AVG DESC;

----------------------------------------------------------------------------------------------------
-- 2. Calculate the cumulative sales per month for each year.
SELECT
	YEARS,	MONTHS,	PAYMENT,
	SUM(PAYMENT) OVER (ORDER BY(YEARS, MONTHS)) CUMULATIVE_SALES

FROM(
SELECT
    EXTRACT(YEAR FROM PUBLIC.ORDERS.ORDER_PURCHASE_TIMESTAMP) AS YEARS,
    EXTRACT(MONTH FROM PUBLIC.ORDERS.ORDER_PURCHASE_TIMESTAMP) AS MONTHS,
    ROUND(SUM(PUBLIC.PAYMENTS.PAYMENT_VALUE)::NUMERIC, 2) AS PAYMENT
FROM
    PUBLIC.ORDERS
    JOIN PUBLIC.PAYMENTS 
	ON PUBLIC.PAYMENTS.ORDER_ID = PUBLIC.ORDERS.ORDER_ID
GROUP BY
    1,
    2
ORDER BY
    1,
    2);

------------------------------------------------------------------------------------------------
-- 3. Calculate the year-over-year growth rate of total sales.
WITH YEAR_PAY AS (
  SELECT
    EXTRACT(YEAR FROM PUBLIC.ORDERS.ORDER_PURCHASE_TIMESTAMP) AS YEARS,
    ROUND(SUM(PUBLIC.PAYMENTS.PAYMENT_VALUE)::NUMERIC, 2) AS PAYMENT
  FROM
    PUBLIC.ORDERS
  JOIN PUBLIC.PAYMENTS ON PUBLIC.PAYMENTS.ORDER_ID = PUBLIC.ORDERS.ORDER_ID
  GROUP BY 1
)
SELECT
  YEARS,
  ROUND(
    (
      (PAYMENT - LAG(PAYMENT, 1) OVER (ORDER BY YEARS)) / 
      LAG(PAYMENT, 1) OVER (ORDER BY YEARS)
    ) * 100,
    2
  ) AS YOY_GROWTH
FROM
  YEAR_PAY
ORDER BY
  YEARS;

----------------------------------------------------------------------------------------------------
-- 4. Calculate the retention rate of customers,
--  defined as the percentage of customers who make another purchase within 6 months of their first purchase.
WITH 
	FIRST_PURCHASE_DATE AS (
		SELECT 
			C.customer_id,
			MIN(order_purchase_timestamp) AS FIRST_TIME_PURCHASE
		FROM
			public.customers C
			JOIN public.orders O ON C.customer_id = O.customer_id
		GROUP BY 
			C.customer_id
		),


	NEXT_PURCHASE_DATE AS (
		SELECT 
			FPD.customer_id,
			COUNT(DISTINCT(O.order_purchase_timestamp)) AS NEXT_TIME_PURCHASE
		FROM
			FIRST_PURCHASE_DATE FPD
			JOIN public.orders O ON O.customer_id = FPD.customer_id
			AND O.order_purchase_timestamp > FIRST_TIME_PURCHASE
			AND O.order_purchase_timestamp < FPD.FIRST_TIME_PURCHASE + INTERVAL '6 MONTH'
		GROUP BY
			FPD.customer_id
		)

SELECT 
	100 * ( COUNT(DISTINCT FPD.customer_id) / COUNT(DISTINCT NPD.customer_id)) AS REPEATED_PURCHASE
FROM
	FIRST_PURCHASE_DATE FPD 
	LEFT JOIN NEXT_PURCHASE_DATE NPD
	ON FPD.customer_id = NPD.customer_id
WHERE 
    NPD.customer_id IS NOT NULL;	


----------------------------------------------------------------------------------------------------
-- 5. Identify the top 3 customers who spent the most money in each year.
SELECT * 
FROM (
	SELECT 
		O.customer_id,
		SUM(P.payment_value) AS AMOUNT_SPEND,
		EXTRACT(YEAR FROM (O.order_purchase_timestamp)) YEARS,
		DENSE_RANK() OVER(PARTITION BY EXTRACT(YEAR FROM (O.order_purchase_timestamp)) ORDER BY SUM(P.payment_value)DESC) RANKING
	FROM 
		public.orders O 
		JOIN public.payments P ON P.order_id = O.order_id
	GROUP BY 
		O.customer_id,
		 EXTRACT(YEAR FROM (O.order_purchase_timestamp))
	)
WHERE
	RANKING <=3